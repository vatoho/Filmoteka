// Code generated by MockGen. DO NOT EDIT.
// Source: actor.go

// Package usecase is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/ilyushkaaa/Filmoteka/internal/actors/entity"
	dto "github.com/ilyushkaaa/Filmoteka/internal/dto"
)

// MockActorUseCase is a mock of ActorUseCase interface.
type MockActorUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockActorUseCaseMockRecorder
}

// MockActorUseCaseMockRecorder is the mock recorder for MockActorUseCase.
type MockActorUseCaseMockRecorder struct {
	mock *MockActorUseCase
}

// NewMockActorUseCase creates a new mock instance.
func NewMockActorUseCase(ctrl *gomock.Controller) *MockActorUseCase {
	mock := &MockActorUseCase{ctrl: ctrl}
	mock.recorder = &MockActorUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorUseCase) EXPECT() *MockActorUseCaseMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActorUseCase) AddActor(actor entity.Actor) (*entity.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", actor)
	ret0, _ := ret[0].(*entity.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorUseCaseMockRecorder) AddActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActorUseCase)(nil).AddActor), actor)
}

// DeleteActor mocks base method.
func (m *MockActorUseCase) DeleteActor(ID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorUseCaseMockRecorder) DeleteActor(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorUseCase)(nil).DeleteActor), ID)
}

// GetActorByID mocks base method.
func (m *MockActorUseCase) GetActorByID(actorID uint64) (*dto.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByID", actorID)
	ret0, _ := ret[0].(*dto.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorByID indicates an expected call of GetActorByID.
func (mr *MockActorUseCaseMockRecorder) GetActorByID(actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByID", reflect.TypeOf((*MockActorUseCase)(nil).GetActorByID), actorID)
}

// GetActors mocks base method.
func (m *MockActorUseCase) GetActors() ([]dto.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]dto.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorUseCaseMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorUseCase)(nil).GetActors))
}

// UpdateActor mocks base method.
func (m *MockActorUseCase) UpdateActor(actor entity.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorUseCaseMockRecorder) UpdateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorUseCase)(nil).UpdateActor), actor)
}
